#!/bin/zsh
# shellcheck shell=bash

# LBRRY (lbrry)
# Rerouter for lbry:// URIs
# v1.0.0

export LANG=en_US.UTF-8
export SYSTEM_VERSION_COMPAT=0
export PATH=/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/bin:/opt/local/bin:/opt/sw/bin:/sw/bin

# script version
version="1.0.0"
vmisc=""
build="2"

# Platypus command to quit GUI app
_quit-app () {
	sleep 1
	printf "QUITAPP\n"
}

# user stuff
accountnames=$(scutil <<< "show State:/Users/ConsoleUser" | awk '/Name :/ && ! /loginwindow/{print $3}')
if ! [[ $accountnames ]] ; then
	accountname="$USER"
	if [[ $accountname ]] ; then
		HOMEDIR=$(dscl . read /Users/"$accountname" NFSHomeDirectory 2>/dev/null | awk -F": " '{print $2}')
		if ! [[ $HOMEDIR ]] || ! [[ -d "$HOMEDIR" ]] ; then
			if [[ -d "/Users/$accountname" ]] ; then
				HOMEDIR="/Users/$accountname"
			else
				HOMEDIR=$(eval echo "~$accountname" 2>/dev/null)
			fi
		fi
	fi
else
	while read -r accountname
	do
		! [[ $accountname ]] && continue
		HOMEDIR=$(dscl . read /Users/"$accountname" NFSHomeDirectory 2>/dev/null | awk -F": " '{print $2}')
		if [[ $HOMEDIR ]] && [[ -d "$HOMEDIR" ]] ; then
			break
		else
			if [[ -d "/Users/$accountname" ]] ; then
				HOMEDIR="/Users/$accountname"
				break
			else
				HOMEDIR=$(eval echo "~$accountname" 2>/dev/null)
				if [[ $HOMEDIR ]] && [[ -d "$HOMEDIR" ]] ; then
					break
				fi
			fi
		fi
	done < <(echo "$accountnames")
fi
if ! [[ $accountname ]] ; then
	accountname=$(id -un 2>/dev/null)
fi
auser=$(id -u "$accountname" 2>/dev/null)
if ! [[ $HOMEDIR ]] || ! [[ -d "$HOMEDIR" ]] ; then
	if [[ $accountname ]] && [[ -d "/Users/$accountname" ]] ; then
		HOMEDIR="/Users/$accountname"
	else 
		HOMEDIR=~
		if ! [[ -d "$HOMEDIR" ]] ; then
			HOMEDIR="$HOME"
			if ! [[ -d "$HOMEDIR" ]] ; then
				echo "ERROR[01]: $process ($myname) could not detect a proper home directory for the currently logged-in user! Exiting..."
				osascript &>/dev/null << EOT
beep
display alert "Internal error [01]: missing home directory" message "$process ($myname) could not detect a proper home directory for the currently logged-in user." as critical buttons {"Quit"} default button "Quit" giving up after 180
EOT
				_quit-app
				exit
			fi
		fi
	fi
fi
euser=$(id -un)
account=$(id -u)

# script stuff
process="LBRRY"
procid="local.lcars.LBRRY"
skid="D1CC1414E11480527EECC3D3C944F8BFB1931574"
mypath="$0" # should be ./LBRRY.app/Contents/Resources/script
myname=$(basename "$mypath")
mypath_short="${mypath/#$HOMEDIR/~}"
[[ $myname == "script" ]] && myname="lbrry"	

# $PATH
if [[ -d "$HOMEDIR/.local/bin" ]] ; then
	export PATH=$PATH:/opt/local/bin:/opt/sw/bin:/sw/bin:"$HOMEDIR"/.local/bin
elif [[ -d "$HOMEDIR/local/bin" ]] ; then
	export PATH=$PATH:/opt/local/bin:/opt/sw/bin:/sw/bin:"$HOMEDIR"/local/bin
elif [[ -d "$HOMEDIR/bin" ]] ; then
	export PATH=$PATH:/opt/local/bin:/opt/sw/bin:/sw/bin:"$HOMEDIR"/bin
fi

# logging
logloc="/tmp/$procid.log"
currentdate=$(date)
if ! [[ -f $logloc ]] ; then
	echo "++++++++ $currentdate ++++++++" > "$logloc"
else
	echo -e "\n++++++++ $currentdate ++++++++" >> "$logloc"
fi
exec > >(tee -a "$logloc") 2>&1
echo "$process ($myname) v$version$vmisc (build $build) [$account]"

# check Platypus locations
scr_parent=$(dirname "$mypath") # Resources (in Contents)
scrp_name=$(basename "$scr_parent")
scr_gramma=$(dirname "$scr_parent") # Contents
exeloc="$scr_gramma/MacOS/LBRRY"
scr_approot=$(dirname "$scr_gramma") # LBRRY.app
scrar_name=$(basename "$scr_approot")

# sounds
# system beep
_sysbeep () {
	osascript -e "beep" &>/dev/null
}
# beep
_beep () {
	afplay "$scr_parent/beep.aif" &>/dev/null
}
# fatal error beep
_error () {
	afplay "$scr_parent/error.aif" &>/dev/null
}

# warning dialog function
_syswarning () {
	_error &
	if ! [[ $3 ]] ; then
		osascript &>/dev/null << EOT
display alert "$1" message "$2" as critical buttons {"Quit"} default button "Quit" giving up after 180
EOT
	else
		launchctl asuser "$auser" osascript &>/dev/null << EOT
display alert "$1" message "$2" as critical buttons {"Quit"} default button "Quit" giving up after 180
EOT
	fi
	_quit-app
	exit
}

# check macOS version
prodv=$(sw_vers -productVersion)
prodv_major=$(echo "$prodv" | awk -F. '{print $1}')
prodv_minor=$(echo "$prodv" | awk -F. '{print $2}')
prodv_fix=$(echo "$prodv" | awk -F. '{print $3}')
if [[ $prodv_major == 10 ]] && [[ $prodv_minor -ge 16 ]] ; then
	prodv_major=11
	prodv_minor=$(echo "$prodv_minor - 16" | bc)
fi

# check runtime/GUI/bundle context
if [[ $scrp_name != "Resources" ]] ; then
	echo "ERROR[02]: $process ($myname) is not running from its regular location! Exiting..."
	_sysbeep &
	_syswarning \
		"Internal error [02]: Resources directory missing" \
		"$process ($myname) is not running from its regular location and will exit."
else
	oserror=false
	if [[ $prodv_major -le 10 ]] && [[ $prodv_minor -le 9 ]] ; then
		if [[ $prodv_minor -lt 9 ]] ; then
			oserror=true
		else
			if [[ $prodv_fix -lt 5 ]] ; then
				oserror=true
			fi
		fi	
	fi
	if $oserror ; then
		echo "ERROR[03]: $process $(myname) needs at least OS X 10.9.5 (Mavericks)! Exiting..."
		_syswarning \
			"Internal error [03]: unsupported OS" \
			"$process ($myname) needs at least OS X 10.9.5 (Mavericks) for Notification Center support."
	fi
	icon_loc="$scr_parent/LBRRY.icns"
	if ! [[ -f "$icon_loc" ]] ; then
		icon_loc="/System/Library/CoreServices/CoreTypes.bundle/Contents/Resources/GenericNetworkIcon.icns"
	fi
	tn_loc="$scr_gramma/Helpers/LBRRY Notifier.app"
fi
if [[ $euser == "root" ]] ; then
	if [[ $accountname != "root" ]] ; then
		echo "ERROR[04]: please do not execute $process ($myname) as root! Exiting..."
		_syswarning "Internal error [04]: code execution" "Please do not run $process ($myname) as root!" "root"
	fi
fi
echo "Execution path: $mypath_short"
if echo "$mypath" | grep -q "/AppTranslocation/" &>/dev/null ; then
	echo "ERROR[05]: application $process ($myname) has been translocated"
	_syswarning "Internal error [05]: AppTranslocation" "Please quit $process ($myname), dequarantine the app, and try again!"
fi
if [[ $scrar_name != "LBRRY.app" ]] || ! [[ -f "$exeloc" ]] ; then
	echo "ERROR[06]: $process ($myname) is running from a modified bundle! Exiting..."
		_syswarning \
			"Internal error [06]: bundle" \
			"$process ($myname) is running from a modified bundle and will exit."
fi
if [[ $1 != "--debug" ]] ; then
	if ! codesign --verify --deep --strict --verbose=1 "$scr_approot" 2>&1 | grep -q "valid on disk$" &>/dev/null ; then
		echo "ERROR[07]: $process ($myname) is running from a modified bundle! Please re-install the app! Exiting..."
			_syswarning \
				"Internal error [07]: bundle signature" \
				"$process ($myname) is running from a modified bundle and will exit. Please re-install the app!"
	fi
	returndir=$(pwd)
	crtsdir="/tmp/lbrry_crts"
	rm -rf "$crtsdir" 2>/dev/null
	mkdir "$crtsdir" 2>/dev/null
	cd "$crtsdir" || echo "Warning: can't cd to /tmp"
	codesign -dv --extract-certificates "$scr_approot" &>/dev/null
	cskid=$(openssl x509 -in "$crtsdir/codesign0" -inform DER -noout -text -fingerprint 2>/dev/null | grep -A1 "Subject Key Identifier" | tail -1 | xargs | sed 's/://g')
	cd "$returndir" || echo "Warning: can't cd back to working directory"
	rm -rf "$crtsdir" 2>/dev/null
	if [[ $cskid != "$skid" ]] ; then
		echo "ERROR[08]: $process ($myname) is running from a modified bundle! Please re-install the app! Exiting..."
			_syswarning \
				"Internal error [08]: bundle signature" \
				"$process ($myname) is running from a modified bundle and will exit. Please re-install the app!"
	fi
	if ! ps aux | grep "LBRRY.app/Contents/MacOS/LBRRY" | grep -v "grep" &>/dev/null ; then
		echo "ERROR[09]: $process ($myname) is not running as a GUI process! Exiting..."
		_syswarning \
			"Internal error [09]: runtime" \
			"$process ($myname) is not running as a GUI process and will exit."
	fi
else
	shift
fi

# notify function
_notify () {
	if [[ $tn_status == osa ]] ; then
		osascript &>/dev/null << EOT
tell application "System Events"
	display notification "$2" with title "$process [" & "$account" & "]" subtitle "$1"
end tell
EOT
	elif [[ $tn_status == tn-app-new ]] || [[ $tn_status == tn-app-old ]] ; then
		if $proprietary ; then
			"$tn_loc/Contents/MacOS/LBRRYNotifier" \
				-title "$process [$account]" \
				-subtitle "$1" \
				-message "$2" \
				>/dev/null
		else
			"$tn_loc/Contents/MacOS/terminal-notifier" \
				-title "$process [$account]" \
				-subtitle "$1" \
				-message "$2" \
				-appIcon "$icon_loc" \
				>/dev/null
		fi
	elif [[ $tn_status == tn-cli ]] ; then
		"$tn" \
			-title "$process [$account]" \
			-subtitle "$1" \
			-message "$2" \
			-appIcon "$icon_loc" \
			>/dev/null
	fi
}

# look for terminal-notifier (only on Yosemite and later)
tnsearch=false
proprietary=false
if [[ -d "$tn_loc" ]] ; then
	proprietary=true
	tn_status="tn-app-new"
	if [[ $prodv_major -eq 10 ]] ; then
		if [[ $prodv_minor -lt 10 ]] ; then
			proprietary=false
			tn_status="osa"
		fi
	fi
else
	if [[ $prodv_major -eq 10 ]] ; then
		if [[ $prodv_minor -lt 10 ]] ; then
			tn_status="osa"
		else
			tnsearch=true
		fi
	elif [[ $prodv_major -ge 11 ]] ; then
		tnsearch=true
	fi
fi
if $tnsearch ; then
	tn=$(command -v terminal-notifier 2>/dev/null)
	if ! [[ $tn ]] ; then
		tn_loc=$(mdfind \
			-onlyin /Applications/ \
			-onlyin "$HOMEDIR"/Applications/ \
			-onlyin /Developer/Applications/ \
			-onlyin "$HOMEDIR"/Developer/Applications/ \
			-onlyin /Network/Applications/ \
			-onlyin /Network/Developer/Applications/ \
			-onlyin /AppleInternal/Applications/ \
			-onlyin /usr/local/Cellar/terminal-notifier/ \
			-onlyin /opt/local/ \
			-onlyin /sw/ \
			-onlyin "$HOMEDIR"/.local/bin \
			-onlyin "$HOMEDIR"/bin \
			-onlyin "$HOMEDIR"/local/bin \
			"kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
		if ! [[ $tn_loc ]] ; then
			tn_loc=$(mdfind \
				-onlyin /Applications/ \
				-onlyin "$HOMEDIR"/Applications/ \
				-onlyin /Developer/Applications/ \
				-onlyin "$HOMEDIR"/Developer/Applications/ \
				-onlyin /Network/Applications/ \
				-onlyin /Network/Developer/Applicationsv \
				-onlyin /AppleInternal/Applications/ \
				-onlyin /usr/local/Cellar/terminal-notifier/ \
				-onlyin /opt/local/ \
				-onlyin /sw/ \
				-onlyin "$HOMEDIR"/.local/bin \
				-onlyin "$HOMEDIR"/bin \
				-onlyin "$HOMEDIR"/local/bin \
				"kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
			if ! [[ $tn_loc ]] ; then
				tn_status="osa"
			else
				tn_status="tn-app-old"
				proprietary=false
			fi
		else
			tn_status="tn-app-new"
			proprietary=false
		fi
	else
		tn_vers=$("$tn" -help | head -1 | awk -F'[()]' '{print $2}' | awk -F. '{print $1"."$2}')
		if (( $(echo "$tn_vers >= 1.8" | bc -l) )) && (( $(echo "$tn_vers < 2.0" | bc -l) )) ; then
			tn_status="tn-cli"
		else
			tn_loc=$(mdfind \
				-onlyin /Applications/ \
				-onlyin "$HOMEDIR"/Applications/ \
				-onlyin /Developer/Applications/ \
				-onlyin "$HOMEDIR"/Developer/Applications/ \
				-onlyin /Network/Applications/ \
				-onlyin /Network/Developer/Applications/ \
				-onlyin /AppleInternal/Applications/ \
				-onlyin /usr/local/Cellar/terminal-notifier/ \
				-onlyin /opt/local/ \
				-onlyin /sw/ \
				-onlyin "$HOMEDIR"/.local/bin \
				-onlyin "$HOMEDIR"/bin \
				-onlyin "$HOMEDIR"/local/bin \
				"kMDItemCFBundleIdentifier == 'fr.julienxx.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
			if ! [[ $tn_loc ]] ; then
				tn_loc=$(mdfind \
					-onlyin /Applications/ \
					-onlyin "$HOMEDIR"/Applications/ \
					-onlyin /Developer/Applications/ \
					-onlyin "$HOMEDIR"/Developer/Applications/ \
					-onlyin /Network/Applications/ \
					-onlyin /Network/Developer/Applications/ \
					-onlyin /AppleInternal/Applications/ \
					-onlyin /usr/local/Cellar/terminal-notifier/ \
					-onlyin /opt/local/ \
					-onlyin /sw/ \
					-onlyin "$HOMEDIR"/.local/bin \
					-onlyin "$HOMEDIR"/bin \
					-onlyin "$HOMEDIR"/local/bin \
					"kMDItemCFBundleIdentifier == 'nl.superalloy.oss.terminal-notifier'" 2>/dev/null | LC_COLLATE=C sort | awk 'NR==1')
				if ! [[ $tn_loc ]] ; then
					tn_status="osa"
				else
					tn_status="tn-app-old"
					proprietary=false
				fi
			else
				tn_status="tn-app-new"
				proprietary=false
			fi
		fi
	fi
fi
if [[ $tn_status == "osa" ]] ; then
	echo "Notifications: AppleScript"
elif [[ $tn_status == "none" ]] ; then
	echo "Notifications: unsupported"
else
	tnloc_short="${tn_loc/#$HOMEDIR/~}"
	echo "Notifications: $tnloc_short"
fi

# write preferences
prefs="$procid.plist"
prefsloc="$HOMEDIR/Library/Preferences/$prefs"
if ! [[ -f "$prefsloc" ]] ; then
	defaults write "$prefs" warnARM -bool true 2>/dev/null
	# manually disable architecture warnings with: defaults write local.lcars.UplohaCompanion warnARM -bool false
fi

# read preferences
if [[ $(/usr/libexec/PlistBuddy -c "Print:warnARM" "$prefsloc" 2>/dev/null) == false ]] ; then 
	archwarn=false
else
	archwarn=true
fi

# hardware & executable architecture checks
if [[ $prodv_major -ge 11 ]] ; then
	hw_arch=$(sysctl -n machdep.cpu.brand_string 2>/dev/null)
	echo "Hardware architecture: $hw_arch"
	! echo "$hw_arch"| grep -q "^Intel" &>/dev/null && macarm=true || macarm=false
	arch_error=false
	exe_arch=$(lipo -archs "$exeloc" 2>/dev/null)
	if ! [[ $exe_arch ]] ; then
		exe_arch=$(lipo -info "$exeloc" 2>/dev/null | awk -F": " '{print $NF}')
	fi
	echo "Executable architectures: $exe_arch"
	if $macarm ; then
		if ! echo "$exe_arch" | grep -q -i "arm64" &>/dev/null ; then
			arch_error=true
		fi
	fi
else
	arch_error=false
fi

# ARM architecture
if $arch_error ; then
	echo "NOTE: Apple ARM architecture support has not been tested!"
	if $archwarn ; then
		_beep &
		_notify "ℹ️ Note: architecture" "Apple ARM support has not been tested!"
	fi
fi

# lbry path function
_ipath () {
	lipath="$1"
	if [[ $(echo "$lipath" | wc -l) -gt 1 ]] ; then
		echo "ERROR: multi-line input"
		_beep &
		_notify "⚠️ Error: input unsupported!" "Multi-line input"
	else
		if ! echo "$lipath" | grep -q "^lbry://" &>/dev/null ; then
			if [[ $lipath == "http://"* ]] || [[ $lipath == "https://"* ]] ; then
				open "$lipath" 2>/dev/null
				echo "Note: input is standard URL: $lipath"
			elif [[ $lipath == "/"* ]] ; then
				webloc=$(/usr/libexec/PlistBuddy -c "Print :URL" "$lipath")
				if [[ $webloc ]] ; then
					if [[ $webloc == "http://"* ]] || [[ $webloc == "https://"* ]] ; then
						open "$webloc" 2>/dev/null
						echo "Note: input is standard URL: $webloc"
					elif [[ $webloc == "lbry://"* ]] ; then
						ourl=$(echo "$webloc" | sed 's-^lbry://-https://lbry.tv/-')
						if [[ $ourl ]] ; then
							open "$ourl" 2>/dev/null
							echo -e "Input: $lipath\nOutput: $ourl"
						else
							echo "ERROR: input parsing: $lipath"
							_beep &
							_notify "⚠️ Error: input parsing!" "$webloc"
						fi
					else
						echo "ERROR: input unsupported: $webloc"
						_beep &
						_notify "⚠️ Error: input unsupported!" "$webloc"
					fi
				else
					echo "ERROR: no input: lbry URIs required!"
					_beep &
					_notify "⚠️ Error: no input!" "lbry URIs required"
				fi
			else
				echo "ERROR: input unsupported: $lipath"
				_beep &
				_notify "⚠️ Error: input unsupported!" "$lipath"
			fi
		else
			ourl=$(echo "$lipath" | sed 's-^lbry://-https://lbry.tv/-')
			if [[ $ourl ]] ; then
				open "$ourl" 2>/dev/null
				echo -e "Input: $lipath\nOutput: $ourl"
			else
				echo "ERROR: input parsing: $lipath"
				_beep &
				_notify "⚠️ Error: input parsing!" "$lipath"
			fi
		fi
	fi
}

# input
if [[ $* ]] ; then
	for ipath in "$@"
	do
		_ipath "$ipath"
	done
else
	ipath=$(pbpaste)
	if ! [[ $ipath ]] ; then
		echo "ERROR: no input: lbry URIs required!"
		_beep &
		_notify "⚠️ Error: no input!" "lbry URIs required"
	else
		_ipath "$ipath"
	fi
fi

_quit-app
